{"version":3,"sources":["Weather.js","Main.js","serviceWorker.js","index.js"],"names":["Weather","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","_this2","fetch","then","res","json","parsedJSON","list","map","data","temp_Min","concat","main","temp_min","temp_Max","temp_max","temp_Aja","temp","weather_Aja","weather","dataTime","dt_txt","setState","isLoaded","catch","error","console","log","react_default","a","createElement","className","align","scope","length","item","key","Component","Main","react_router_dom","style","textAlign","exact","to","react_router","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_Main","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.61fa957c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Weather extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        items: []\r\n      };\r\n    }\r\n    componentDidMount() {\r\n        fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=Yogyakarta,id&mode=json&appid=99819fc994ebea37f427a44f569e9cdf&units=metric\")\r\n        .then(res => res.json())\r\n        .then(parsedJSON => parsedJSON.list.map(data => (\r\n          {\r\n            temp_Min: `${data.main.temp_min}`,\r\n            temp_Max: `${data.main.temp_max}`,\r\n            temp_Aja:  `${data.main.temp}`,\r\n            weather_Aja: `${data.weather[0].main}`,\r\n            dataTime: `${data.dt_txt}`,\r\n          }\r\n        )))\r\n        .then(items => this.setState({\r\n          items,\r\n          isLoaded: false\r\n        }))\r\n        .catch(error => console.log('parsing failed', error))\r\n      }\r\n    \r\n      render() {\r\n        const {items} = this.state;\r\n        return (\r\n            \r\n \r\n          <div className=\"position\">\r\n            <table className=\"table table-bordered\" align=\"center\">\r\n              <thead>\r\n              <tr>\r\n                <th scope=\"col\">Datetime</th>\r\n                <th scope=\"col\">Temp</th> \r\n                <th scope=\"col\">Temp Min</th>\r\n                <th scope=\"col\">Temp Max</th>\r\n                <th scope=\"col\">Weather</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                items.length > 0 ? items.map(item => {\r\n                  const {dataTime,temp_Aja,temp_Min,temp_Max,weather_Aja} = item;\r\n                  return (\r\n                    <tr key={dataTime}>\r\n                      <td scope=\"row\">\r\n                        {dataTime}\r\n                      </td>\r\n                      <td>\r\n                        {temp_Aja}\r\n                      </td>\r\n                      <td>\r\n                        {temp_Min}\r\n                      </td>\r\n                      <td>\r\n                        {temp_Max}\r\n                      </td>\r\n                      <td>\r\n                        {weather_Aja}\r\n                      </td>\r\n                    </tr>  \r\n                  );\r\n                }) : null\r\n              }\r\n            </tbody>  \r\n          </table>\r\n        </div>\r\n        );\r\n      }\r\n    }\r\n    \r\n    export default Weather;","import React, { Component } from \"react\";\r\nimport {Route, NavLink, HashRouter } from \"react-router-dom\";\r\nimport Weather from \"./Weather\";\r\n\r\nclass Main extends Component {\r\n    render() {\r\n      return (\r\n        <HashRouter>\r\n          <div>\r\n            <div style={{textAlign:\"center\"}}>\r\n            <h1 className=\"title\">Prakiraan cuaca Yogyakarta</h1>\r\n            </div>\r\n            <ul className=\"header\">\r\n              <li><NavLink exact to=\"/\">Weather</NavLink></li>\r\n   \r\n            </ul>\r\n            <div className=\"content\">\r\n              <Route exact path=\"/\" component={Weather}/>\r\n            </div>\r\n          </div>\r\n          </HashRouter>\r\n      );\r\n    }\r\n  }\r\n  export default Main;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport Main from './Main';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}